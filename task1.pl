% Первая часть задания - предикаты работы со списками

% Предикат length для вычисления длины списка.

length([], 0).
length([_|T], N) :- length(T, N1), N is N1 + 1.

% Предикат member используется для проверки принадлежности элемента к списку.

member(X, [X|_]).
member(X, [_|T]) :- member(X, T).

% Предикат append используется для объединения двух списков.

append([], L, L).
append([H|T], L, [H|R]) :- append(T, L, R).

% Предикат remove используется для удаления всех вхождений элемента из списка.

remove(_, [], []).
remove(X, [X|T], R) :- remove(X, T, R).
remove(X, [H|T], [H|R]) :- X \= H, remove(X, T, R).

% Предикат permute используется для генерации всех возможных перестановок списка.

permute([], []).
permute(L, [H|T]) :- select(H, L, R), permute(R, T).

% Предикат sublist используется для проверки, является ли один список подсписком другого.

sublist([], _).
sublist([H|T], L) :- append(_, [H|T2], L), sublist(T, T2).







